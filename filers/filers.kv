#@PydevCodeAnalysisIgnore
#:kivy 1.8
#:import str_to_float filers.tools.str_to_float
#:import pretty_time filers.tools.pretty_time
#:import expanduser os.path.expanduser


<SizedLabel@Label>:
    padding_x: '10dp'
    size_hint_x: None
    width: self.texture_size[0]

<KNLabel@KNSpaceBehavior+Label>
<KNSizedLabel@KNSpaceBehavior+SizedLabel>

<KNColoredSpinner@KNSpaceBehavior+ColoredSpinner>

<SizedScreenManager>:
    current_screen_obj: self.current_screen
    size_hint_y: None
    height: self.current_screen_obj.height if self.current_screen_obj else 0

<KNSizedScreenManager@KNSpaceBehavior+SizedScreenManager>

<RadioLabeledCheck@KNSpaceBehavior+ToggleButtonBehavior+GridLayout>:
    rows: 1
    size_hint_x: None
    width: self.minimum_width
    text: ''
    always_release: True
    allow_no_selection: False
    SilentCheckBox:
        id: checkbox
        always_release: True
        allow_no_selection: False
        size_hint_x: None
        width: '34sp'
        state: root.state
        group: (root.group + 'A') if root.group else ''
    SizedLabel:
        text: root.text

<BorderedGridLayout@GridLayout>:
    rgba: (0, 0, 0, 1)
    canvas.before:
        Color:
            rgba: self.rgba
        Rectangle:
            pos: self.pos
            size: self.size
        Color:
            rgba: 1, 1, 1, 1
        BorderImage:
            border: (16, 16, 16, 16)
            pos: self.pos
            size: self.size
            source: 'blue_border.png'
        Color:
            rgba: 1, 1, 1, 1

<GridStencil@StencilView+GridLayout>


<RelativeStencil@RelativeLayout, StencilView>


<CountDownTimer>:
    orientation: 'vertical'
    counter: str_to_float(counter.text, val_type=float, err_val=0.)
    ToggleButton:
        on_size: self.text_size = (None, None)
        text: pretty_time(root.counter) if root.counter else ''
        on_texture_size:
            non_zero = self.texture_size[0] and self.texture_size[1]
            if non_zero: scale = min(self.width / float(self.texture_size[0]), self.height / float(self.texture_size[1]))
            if non_zero: self.texture_size = self.texture_size[0] * scale, self.texture_size[1] * scale
        font_size: max(self.height, 12)
        on_state:
            if self.state == 'down': self.state = root.count_start()
            if self.state == 'normal': root.count_end()
        background_color: root.blink_color
        background_down: ''
    BoxLayout:
        size_hint_y: None
        height: min(60, self.parent.height)
        TextInput:
            input_filter: 'float'
            id: counter
            font_size: '28dp'
            disabled: root.counting
        Button:
            text: 'Reset'
            disabled: root.counting
            on_press: root.counter = str_to_float(counter.text, val_type=float, err_val=0.)


<ErrorTab@ErrorIndicatorBase+TabbedPanelItem>

<MainView@FocusBehavior+BoxLayout>:
    panel: panel
    orientation: 'vertical'
    TabbedPanel:
        id: panel
        on_parent: app.tabbed_wgt = self
        do_default_tab: False
        tab_width: None
        TabbedPanelItem:
            text: 'Record'
            PlayerRoot
        ErrorTab:
            knsname: 'error_indicator'
            size_hint_x: None
            width: self.height
            on_parent:
                app.error_indicator = self
                self._container = error_container
            ErrorLogContainer:
                id: error_container
        #TabbedPanelItem:
        #    text: 'Convert'
        #    VideoConverter
#         TabbedPanelItem:
#             id: tools
#             text: 'File tools'
#             FileTools
#         TabbedPanelItem:
#             text: 'Help'
#             RstDocument:
#                 source: app.help_source
#         TabbedPanelItem:
#             id: tools
#             text: 'Log'
#             ScrollLabel:
#                 text: '\n'.join(app.filers_log)
