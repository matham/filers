# -*- coding: utf-8 -*-
#
# FFPyPlayer documentation build configuration file, created by
# sphinx-quickstart on Mon Dec 23 18:07:03 2013.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys
import os
os.environ['SPHINX_DOC_INCLUDE'] = '1'

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
sys.path.insert(0, os.path.abspath('../../'))
import filers

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.intersphinx',
]

intersphinx_mapping = {'py': ('http://docs.python.org', None),
                       'kivy': ('http://kivy.org/docs', None),
                       'ffpy': ('http://matham.github.io/ffpyplayer', None)}

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'Filers'
copyright = u'2014 CPL Lab - MIT license'
author = u'Matthew Einhorn'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = filers.__version__
# The full version, including alpha/beta/rc tags.
release = filers.__version__

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = []

# The reST default role (used for this markup: `text`) to use for all
# documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
#html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = project + 'doc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
  ('index', project + '.tex', project + u' Documentation',
   author, 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', project, project + u' Documentation',
     [author], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', project, project + u' Documentation',
   author, project, 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False


elems = {
    'main':
    ({'display_color': 'display color',
    'last_tgt_path': 'last output path', 'last_src_path': 'last input path'},
    {}),
    'record':
    ({'space_update_intvl': 'Update interval', 'irate': 'input rate',
      'iwidth': 'input width', 'iheight': 'input height',
      'icodec': 'input codec', 'ipix_fmt': 'input pixel format',
      'idshow_dev': 'direct show camera name',
      'idshow_opt': 'direct show camera options',
      'ifilename': 'input filename', 'ifmt': 'input format',
      'owidth': 'output width', 'oheight': 'output height',
      'ofmt': 'output format', 'ocodec': 'output codec',
      'opix_fmt': 'output pixel format', 'odir': 'output directory',
      'ofilename': 'output filename', 'oext': 'output extension',
      'orate': 'output rate', 'oincrement': 'output increment'},
    {}),
    'process':
    ({'input': 'Input files', 'simple_filt': 'Simple / regex filtering',
      'input_filter': 'Input files filter', 'group_filt': 'grouping filter',
      'input_start': 'input delay', 'input_end': 'input cutoff',
      'merge_type': 'merge mode', 'out_overwrite': 'overwrite',
      'out_audio': 'keep audio', 'out_codec': 'output type', 'crf': 'crf',
      'compress_speed': 'speed', 'num_threads': 'threads',
      'out_append': 'append', 'add_command': 'Additional commands',
      'output': 'output', 'pre_process': 'pre processing',
      'pre_process_pat': 'pre process pattern'},
    {}),
    'file_tools':
    ({'input': 'Input files', 'simple_filt': 'Simple / regex filtering',
      'input_filter': 'Input files filter', 'mode': 'process mode',
      'verify_type': 'output verification', 'ext': 'extension',
      'on_error': 'error handling', 'preview': 'preview mode',
      'output': 'output'},
    {})
         }


def fill_rst(app, what, name, obj, options, lines):
    if what != 'attribute':
        return
    idx = name.rfind('.')
    if idx == -1:
        return

    attr = name[idx + 1:]

    for key in elems.iterkeys():
        if (name.startswith('filers.{}'.format(key)) and
            key in elems and attr in elems[key][0]):
            elems[key][1][attr] = [l.replace(':attr:', '') for l in lines]


def write_rst(app, exception):
    for key, val in elems.iteritems():
        title, vals = val

        with open('source/help_config_{}.rst'.format(key), 'w') as outfile:
            outfile.write('{}\n{}\n\n'.format(key.title(), '=' * len(key)))
            outfile.write(':ref:`help_{}`, :ref:`help`\n\n'.format(key))
            for name, lines in vals.iteritems():
                pretty = title[name]
                outfile.write('{}\n'.format(pretty.title()))
                outfile.write('-' * len(pretty))
                outfile.write('\n\nConfig key: {}\n\n'.format(name))
                outfile.write('\n'.join(lines))
                outfile.write('\n')

        with open('source/help_config_{}_kivy.rst'.format(key), 'w') as outfile:
            outfile.write('{}\n{}\n\n'.format(key.title(), '=' * len(key)))
            outfile.write(':doc:`help_{}_kivy.rst`, '
                          ':doc:`help_kivy.rst`\n\n'.format(key))
            for name, lines in vals.iteritems():
                pretty = title[name]
                outfile.write('{}\n'.format(pretty.title()))
                outfile.write('-' * len(pretty))
                outfile.write('\n\nConfig key: {}\n\n'.format(name))
                outfile.write('\n'.join(lines))
                outfile.write('\n')


# def setup(app):
#     app.connect('autodoc-process-docstring', fill_rst)
#     app.connect('build-finished', write_rst)

